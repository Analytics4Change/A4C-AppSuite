#!/usr/bin/env node

/**
 * Schema Sync Script
 *
 * Syncs TypeScript event type definitions from the Infrastructure repository
 * to the Frontend repository at build time.
 *
 * This ensures the Frontend always uses the latest event contracts defined
 * in the Infrastructure repo (source of truth).
 */

const fs = require('fs');
const path = require('path');

// Configuration
const INFRASTRUCTURE_REPO = path.resolve(__dirname, '../../A4C-Infrastructure');
const SOURCE_DIR = path.join(INFRASTRUCTURE_REPO, 'supabase/contracts/types');
const TARGET_DIR = path.resolve(__dirname, '../src/types/generated');

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function error(message) {
  log(`‚ùå ${message}`, 'red');
}

function success(message) {
  log(`‚úÖ ${message}`, 'green');
}

function info(message) {
  log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

function warning(message) {
  log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

/**
 * Check if Infrastructure repository exists
 */
function checkInfrastructureRepo() {
  if (!fs.existsSync(INFRASTRUCTURE_REPO)) {
    error('Infrastructure repository not found!');
    error(`Expected location: ${INFRASTRUCTURE_REPO}`);
    error('Please ensure A4C-Infrastructure is cloned as a sibling directory.');
    process.exit(1);
  }

  if (!fs.existsSync(SOURCE_DIR)) {
    error('Event types directory not found in Infrastructure repo!');
    error(`Expected location: ${SOURCE_DIR}`);
    error('Please ensure the Infrastructure repo has the contracts/types directory.');
    process.exit(1);
  }

  success('Infrastructure repository found');
}

/**
 * Create target directory if it doesn't exist
 */
function ensureTargetDirectory() {
  if (!fs.existsSync(TARGET_DIR)) {
    fs.mkdirSync(TARGET_DIR, { recursive: true });
    success(`Created target directory: ${TARGET_DIR}`);
  }
}

/**
 * Add header comment to generated files
 */
function addGeneratedHeader(content, sourceFile) {
  const header = `/**
 * ‚ö†Ô∏è AUTO-GENERATED FILE - DO NOT EDIT DIRECTLY
 *
 * This file is automatically generated from the Infrastructure repository.
 * Source: A4C-Infrastructure/supabase/contracts/types/${sourceFile}
 *
 * To update these types:
 * 1. Modify the source files in the Infrastructure repository
 * 2. Run: npm run sync-schemas
 *
 * Last synced: ${new Date().toISOString()}
 */

`;
  return header + content;
}

/**
 * Copy and process TypeScript files
 */
function syncSchemas() {
  try {
    // Get all TypeScript files from source directory
    const files = fs.readdirSync(SOURCE_DIR).filter(file => file.endsWith('.ts'));

    if (files.length === 0) {
      warning('No TypeScript files found in source directory');
      return;
    }

    let syncedCount = 0;

    files.forEach(file => {
      const sourcePath = path.join(SOURCE_DIR, file);
      const targetPath = path.join(TARGET_DIR, file);

      // Read source file
      const content = fs.readFileSync(sourcePath, 'utf8');

      // Add header and write to target
      const processedContent = addGeneratedHeader(content, file);
      fs.writeFileSync(targetPath, processedContent, 'utf8');

      info(`Synced: ${file}`);
      syncedCount++;
    });

    success(`Synced ${syncedCount} file(s) successfully!`);
  } catch (err) {
    error(`Failed to sync schemas: ${err.message}`);
    process.exit(1);
  }
}

/**
 * Create index.ts for convenient imports
 */
function createIndexFile() {
  const indexPath = path.join(TARGET_DIR, 'index.ts');
  const content = `/**
 * ‚ö†Ô∏è AUTO-GENERATED FILE - DO NOT EDIT DIRECTLY
 *
 * Re-exports all event types from generated files.
 * Last generated: ${new Date().toISOString()}
 */

export * from './events';
`;

  fs.writeFileSync(indexPath, content, 'utf8');
  info('Created index.ts for convenient imports');
}

/**
 * Main execution
 */
function main() {
  log('\nüîÑ Starting schema sync...', 'blue');
  log('‚îÄ'.repeat(50), 'blue');

  checkInfrastructureRepo();
  ensureTargetDirectory();
  syncSchemas();
  createIndexFile();

  log('‚îÄ'.repeat(50), 'green');
  success('Schema sync completed!\n');
}

// Run the script
main();
