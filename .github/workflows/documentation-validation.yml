name: Documentation Validation

on:
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'docs/**'
      - '*.md'
      - 'package.json'
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'docs/**'
      - '*.md'
  workflow_dispatch:
  schedule:
    # Weekly documentation audit - Sundays at 2 AM
    - cron: '0 2 * * 0'

jobs:
  validate-documentation:
    name: Validate Documentation
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0  # Full history for better diff analysis

      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci

      - name: Build TypeScript scripts
        run: |
          npm run scripts:build

      - name: Run documentation structure validation
        id: validate-structure
        run: |
          if node dist/scripts/documentation/validate-docs.js; then
            echo "validation_failed=false" >> $GITHUB_OUTPUT
          else
            echo "validation_failed=true" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Check code-documentation alignment
        id: check-alignment
        env:
          NODE_ENV: ci
        run: |
          if node dist/scripts/documentation/check-doc-alignment.js; then
            echo "alignment_failed=false" >> $GITHUB_OUTPUT
          else
            echo "alignment_failed=true" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Lint markdown files
        id: lint-markdown
        run: |
          if npm run docs:lint; then
            echo "lint_failed=false" >> $GITHUB_OUTPUT
          else
            echo "lint_failed=true" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Check for broken links
        id: link-check
        uses: gaurav-nelson/github-action-markdown-link-check@d53a906aa6b22b8979d33bc86170567e619495ec # v1.0.15
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'no'
          folder-path: 'docs'
          file-path: './README.md, ./CLAUDE.md'
          config-file: 'mlc_config.json'
        continue-on-error: true

      - name: Generate documentation coverage report
        id: coverage
        run: |
          # Count documented vs undocumented components
          total_components=$(find src/components -name "*.tsx" -not -path "*/test/*" | wc -l)
          documented_components=$(find docs/components -name "*.md" | wc -l)
          
          # Ensure we don't divide by zero
          if [ "$total_components" -gt 0 ]; then
            coverage=$((documented_components * 100 / total_components))
          else
            coverage=100
          fi
          
          echo "component_coverage=$coverage" >> $GITHUB_OUTPUT
          echo "total_components=$total_components" >> $GITHUB_OUTPUT
          echo "documented_components=$documented_components" >> $GITHUB_OUTPUT
          
          # Create coverage badge data
          if [ $coverage -ge 90 ]; then
            badge_color="green"
          elif [ $coverage -ge 70 ]; then
            badge_color="yellow"
          else
            badge_color="red"
          fi
          echo "badge_color=$badge_color" >> $GITHUB_OUTPUT

      - name: Generate API documentation summary
        run: |
          # Simple component count for API documentation coverage
          echo "API documentation coverage calculated from component documentation" > temp-api-docs.txt
        continue-on-error: true

      - name: Create documentation report
        id: create-report
        run: |
          cat << EOF > doc-status-report.md
          ## üìö Documentation Status Report
          
          ### Validation Results
          | Check | Status |
          |-------|--------|
          | Structure Validation | ${{ steps.validate-structure.outputs.validation_failed == 'true' && '‚ùå Failed' || '‚úÖ Passed' }} |
          | Code Alignment | ${{ steps.check-alignment.outputs.alignment_failed == 'true' && '‚ùå Failed' || '‚úÖ Passed' }} |
          | Markdown Linting | ${{ steps.lint-markdown.outputs.lint_failed == 'true' && '‚ö†Ô∏è Warnings' || '‚úÖ Clean' }} |
          
          ### Coverage Metrics
          - **Component Documentation**: ${{ steps.coverage.outputs.component_coverage }}% (${{ steps.coverage.outputs.documented_components }}/${{ steps.coverage.outputs.total_components }})
          - **Coverage Status**: ${{ steps.coverage.outputs.component_coverage >= 90 && '‚úÖ Excellent' || steps.coverage.outputs.component_coverage >= 70 && '‚ö†Ô∏è Good' || '‚ùå Needs Improvement' }}
          
          EOF
          
          # Add detailed alignment information if alignment failed
          if [ "${{ steps.check-alignment.outputs.alignment_failed }}" == "true" ] && [ -f "doc-alignment-report.json" ]; then
            echo "Extracting detailed alignment information..."
            # Use a dedicated Node.js script instead of inline execution
            node dist/scripts/documentation/extract-alignment-summary.js || echo "Could not extract alignment details"
          fi
          
          # Add artifact links section
          cat << EOF >> doc-status-report.md
          ### Detailed Reports
          - [Validation Report](doc-validation-report.json)
          - [Alignment Report](doc-alignment-report.json)
          
          ### Recommendations
          EOF
          
          # Add recommendations based on results
          if [ "${{ steps.validate-structure.outputs.validation_failed }}" == "true" ]; then
            echo "- Fix documentation structure issues identified in validation report" >> doc-status-report.md
          fi
          
          if [ "${{ steps.check-alignment.outputs.alignment_failed }}" == "true" ]; then
            echo "- Review detailed alignment issues above and implement suggested fixes" >> doc-status-report.md
            echo "- Download alignment report artifact for complete issue listings" >> doc-status-report.md
          fi
          
          if [ ${{ steps.coverage.outputs.component_coverage }} -lt 90 ]; then
            echo "- Increase component documentation coverage to meet 90% target" >> doc-status-report.md
          fi
          
          echo "" >> doc-status-report.md
          echo "---" >> doc-status-report.md
          echo "*Generated at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")*" >> doc-status-report.md

      - name: Post PR comment with documentation status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('doc-status-report.md', 'utf8');
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Documentation Status Report')
            );
            
            // Update or create comment
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: report
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
            }

      - name: Upload documentation reports
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: documentation-reports
          path: |
            doc-validation-report.json
            doc-alignment-report.json
            doc-status-report.md
          retention-days: 30

      - name: Create issue for documentation problems (scheduled run)
        if: |
          github.event_name == 'schedule' &&
          (steps.validate-structure.outputs.validation_failed == 'true' ||
           steps.check-alignment.outputs.alignment_failed == 'true' ||
           steps.coverage.outputs.component_coverage < 90)
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('doc-status-report.md', 'utf8');
            
            const issueTitle = 'üìö Weekly Documentation Audit - Issues Found';
            const issueBody = `## Weekly Documentation Audit Results
            
            ${report}
            
            ### Action Required
            Please address the documentation issues identified above to maintain code quality and developer experience.
            
            This issue was automatically created by the weekly documentation audit workflow.`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['documentation', 'maintenance']
            });

      - name: Check for critical issues
        id: critical-check
        run: |
          # Initialize arrays instead of strings for proper handling
          CRITICAL_ARRAY=()
          WARNING_ARRAY=()
          
          # Structure validation failures are always critical
          if [ "${{ steps.validate-structure.outputs.validation_failed }}" = "true" ]; then
            CRITICAL_ARRAY+=("structure")
          fi
          
          # Alignment failures are critical only if high-priority issues exist
          if [ "${{ steps.check-alignment.outputs.alignment_failed }}" = "true" ] && [ -f "doc-alignment-report.json" ]; then
            # Check if there are high-priority alignment issues
            HIGH_PRIORITY=$(node dist/scripts/documentation/count-high-priority-issues.js 2>/dev/null || echo "0")
            
            if [ "$HIGH_PRIORITY" -gt "0" ]; then
              CRITICAL_ARRAY+=("alignment-high-priority")
            else
              WARNING_ARRAY+=("alignment-medium-low")
            fi
          fi
          
          # Coverage check with proper defaults
          COVERAGE="${{ steps.coverage.outputs.component_coverage }}"
          COVERAGE=${COVERAGE:-0}  # Default to 0 if not set
          if [ "$COVERAGE" -lt 50 ]; then
            CRITICAL_ARRAY+=("coverage-critical")
          elif [ "$COVERAGE" -lt 90 ]; then
            WARNING_ARRAY+=("coverage-warning")
          fi
          
          # External link check - distinguish from internal link validation
          if [ "${{ steps.link-check.outcome }}" = "failure" ]; then
            CRITICAL_ARRAY+=("external-links")
          fi
          
          # Convert arrays to strings
          CRITICAL_ISSUES=$(IFS=' '; echo "${CRITICAL_ARRAY[*]}")
          WARNING_ISSUES=$(IFS=' '; echo "${WARNING_ARRAY[*]}")
          
          # Set outputs with proper boolean handling
          echo "critical_issues=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
          echo "warning_issues=$WARNING_ISSUES" >> $GITHUB_OUTPUT
          echo "has_critical=$([ ${#CRITICAL_ARRAY[@]} -gt 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "has_warnings=$([ ${#WARNING_ARRAY[@]} -gt 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT
          
          # Debug output for troubleshooting
          echo "DEBUG: Step outcomes:"
          echo "DEBUG:   - validate-structure: ${{ steps.validate-structure.outputs.validation_failed }}"
          echo "DEBUG:   - check-alignment: ${{ steps.check-alignment.outputs.alignment_failed }}"
          echo "DEBUG:   - lint-markdown: ${{ steps.lint-markdown.outputs.lint_failed }}"
          echo "DEBUG:   - link-check: ${{ steps.link-check.outcome }}"
          echo "DEBUG: Calculated values:"
          echo "DEBUG:   - COVERAGE=$COVERAGE"
          echo "DEBUG:   - HIGH_PRIORITY=$HIGH_PRIORITY"
          echo "DEBUG: Issue arrays:"
          echo "DEBUG:   - CRITICAL_ARRAY=(${CRITICAL_ARRAY[*]})"
          echo "DEBUG:   - WARNING_ARRAY=(${WARNING_ARRAY[*]})"
          echo "DEBUG: Final outputs:"
          echo "DEBUG:   - critical_issues='$CRITICAL_ISSUES'"
          echo "DEBUG:   - warning_issues='$WARNING_ISSUES'"
          echo "DEBUG:   - has_critical=$([ ${#CRITICAL_ARRAY[@]} -gt 0 ] && echo true || echo false)"
          echo "DEBUG:   - has_warnings=$([ ${#WARNING_ARRAY[@]} -gt 0 ] && echo true || echo false)"

      - name: Fail if critical issues found
        if: |
          github.event_name == 'pull_request' &&
          steps.critical-check.outputs.has_critical == 'true'
        run: |
          echo "‚ùå CRITICAL documentation issues found: ${{ steps.critical-check.outputs.critical_issues }}"
          echo "These issues must be fixed before merging:"
          
          # Only show error descriptions for issues that actually occurred
          CRITICAL_ISSUES="${{ steps.critical-check.outputs.critical_issues }}"
          
          if [[ "$CRITICAL_ISSUES" == *"structure"* ]]; then
            echo "- Structure validation failures detected - fix validation errors"
          fi
          
          if [[ "$CRITICAL_ISSUES" == *"alignment-high-priority"* ]]; then
            echo "- High-priority alignment issues detected - address code-documentation mismatches"
          fi
          
          if [[ "$CRITICAL_ISSUES" == *"coverage-critical"* ]]; then
            echo "- Component coverage below 50% - add documentation for more components"
          fi
          
          if [[ "$CRITICAL_ISSUES" == *"external-links"* ]]; then
            echo "- Broken external links detected - fix or update broken URLs"
          fi
          
          echo ""
          echo "Review the detailed issues in the PR comment above."
          exit 1

      - name: Warning for non-critical issues
        if: |
          github.event_name == 'pull_request' &&
          steps.critical-check.outputs.has_critical != 'true' &&
          steps.critical-check.outputs.has_warnings == 'true'
        run: |
          echo "‚ö†Ô∏è Documentation warnings found: ${{ steps.critical-check.outputs.warning_issues }}"
          echo "These should be addressed but don't block the PR:"
          
          # Only show warning descriptions for issues that actually occurred
          WARNING_ISSUES="${{ steps.critical-check.outputs.warning_issues }}"
          
          if [[ "$WARNING_ISSUES" == *"alignment-medium-low"* ]]; then
            echo "- Medium/low priority alignment issues detected - review and update documentation"
          fi
          
          if [[ "$WARNING_ISSUES" == *"coverage-warning"* ]]; then
            echo "- Component coverage between 50-90% - consider adding more documentation"
          fi
          
          echo ""
          echo "Consider addressing these in a follow-up PR."

      - name: Success message
        if: |
          steps.validate-structure.outputs.validation_failed != 'true' &&
          steps.check-alignment.outputs.alignment_failed != 'true'
        run: |
          echo "‚úÖ Documentation validation passed successfully!"