name: Memory Leak Detection

on:
  pull_request:
    paths:
      - '**/*.test.js'
      - '**/*.test.ts'
      - '**/*.test.jsx'
      - '**/*.test.tsx'
      - '**/*.spec.js'
      - '**/*.spec.ts'
      - '**/*.spec.jsx'
      - '**/*.spec.tsx'
      - 'src/**/*.js'
      - 'src/**/*.ts'
      - 'src/**/*.jsx'
      - 'src/**/*.tsx'
  workflow_dispatch:
    inputs:
      full_analysis:
        description: 'Run full memory analysis on all tests'
        required: false
        default: false
        type: boolean

env:
  NODE_OPTIONS: '--expose-gc --max-old-space-size=4096'
  MEMORY_PROFILE: 'true'
  CI: 'true'

jobs:
  memory-check:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code with history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js with caching
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          # Install additional memory analysis tools
          npm install --no-save glob chart.js

      - name: Create memory reports directory
        run: mkdir -p memory-reports

      - name: Check for documentation-only changes
        id: check-docs
        run: |
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
          NON_DOC_CHANGES=$(echo "$CHANGED_FILES" | grep -v -E '\.(md|txt|yml|yaml)$' || true)
          if [ -z "$NON_DOC_CHANGES" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Identify changed test files
        if: steps.check-docs.outputs.skip == 'false'
        id: changed-files
        run: |
          CHANGED_TESTS=$(git diff --name-only origin/main...HEAD | grep -E '\.(test|spec)\.(js|jsx|ts|tsx)$' || true)
          echo "changed_tests<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_TESTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          if [ -n "$CHANGED_TESTS" ]; then
            echo "has_changed_tests=true" >> $GITHUB_OUTPUT
            echo "Changed test files:"
            echo "$CHANGED_TESTS"
          else
            echo "has_changed_tests=false" >> $GITHUB_OUTPUT
          fi

      - name: Download baseline memory data
        if: steps.check-docs.outputs.skip == 'false'
        run: |
          # Try to download baseline from main branch artifacts
          # Fallback to creating new baseline if not found
          node scripts/ci-memory-baseline.js download || echo "No baseline found, will create new one"

      - name: Run memory leak detection
        if: steps.check-docs.outputs.skip == 'false'
        id: memory-check
        run: |
          if [ "${{ github.event.inputs.full_analysis }}" == "true" ]; then
            echo "Running full memory analysis..."
            node scripts/ci-memory-detection.js --full --output ./memory-report.json
          elif [ "${{ steps.changed-files.outputs.has_changed_tests }}" == "true" ]; then
            echo "Running targeted memory analysis on changed tests..."
            echo '${{ steps.changed-files.outputs.changed_tests }}' | node scripts/ci-memory-detection.js --changed-files --output ./memory-report.json
          else
            echo "Running impact analysis on related tests..."
            node scripts/ci-memory-detection.js --impact-analysis --output ./memory-report.json
          fi
        continue-on-error: true

      - name: Generate memory charts
        if: steps.check-docs.outputs.skip == 'false' && always()
        run: |
          if [ -f memory-report.json ]; then
            node scripts/generate-memory-charts.js memory-report.json memory-reports/
          fi

      - name: Update baseline on main branch
        if: github.ref == 'refs/heads/main' && steps.check-docs.outputs.skip == 'false'
        run: |
          node scripts/ci-memory-baseline.js update memory-report.json

      - name: Upload memory report artifacts
        if: steps.check-docs.outputs.skip == 'false' && always()
        uses: actions/upload-artifact@v4
        with:
          name: memory-analysis-report-${{ github.run_id }}
          path: |
            memory-report.json
            memory-reports/*.html
            memory-reports/*.png
            memory-reports/*.md
          retention-days: 30

      - name: Generate PR comment
        if: steps.check-docs.outputs.skip == 'false' && github.event_name == 'pull_request' && always()
        id: pr-comment
        run: |
          if [ -f memory-report.json ]; then
            node scripts/ci-memory-reporter.js memory-report.json > pr-comment.md
            echo "has_report=true" >> $GITHUB_OUTPUT
          else
            echo "Memory analysis could not be completed." > pr-comment.md
            echo "has_report=false" >> $GITHUB_OUTPUT
          fi

      - name: Post PR comment with memory analysis
        if: steps.check-docs.outputs.skip == 'false' && github.event_name == 'pull_request' && steps.pr-comment.outputs.has_report == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('pr-comment.md', 'utf8');
            
            // Find existing memory check comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('ðŸ§  Memory Leak Analysis')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Check memory thresholds and fail if critical
        if: steps.check-docs.outputs.skip == 'false' && always()
        run: |
          if [ -f memory-report.json ]; then
            node scripts/check-memory-thresholds.js memory-report.json
          fi