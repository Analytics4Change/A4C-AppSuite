name: Scheduled Memory Baseline Update

on:
  schedule:
    # Run every Sunday at 2 AM UTC to update baseline
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force baseline update even if no changes'
        required: false
        default: false
        type: boolean

env:
  NODE_OPTIONS: '--expose-gc --max-old-space-size=4096'
  MEMORY_PROFILE: 'true'

jobs:
  update-baseline:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Setup Node.js with caching
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm install --no-save glob chart.js

      - name: Create memory reports directory
        run: mkdir -p memory-reports

      - name: Check for recent baseline
        id: check-baseline
        run: |
          if [ -f baseline-memory.json ]; then
            # Check if baseline is less than 7 days old
            BASELINE_AGE=$((($(date +%s) - $(stat -c %Y baseline-memory.json)) / 86400))
            if [ $BASELINE_AGE -lt 7 ] && [ "${{ github.event.inputs.force_update }}" != "true" ]; then
              echo "skip=true" >> $GITHUB_OUTPUT
              echo "Baseline is only $BASELINE_AGE days old, skipping update"
            else
              echo "skip=false" >> $GITHUB_OUTPUT
              echo "Baseline is $BASELINE_AGE days old, updating"
            fi
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "No baseline found, creating new one"
          fi

      - name: Run full memory analysis
        if: steps.check-baseline.outputs.skip == 'false'
        run: |
          node scripts/ci-memory-detection.js --full --output ./baseline-report.json
        continue-on-error: true

      - name: Update baseline from analysis
        if: steps.check-baseline.outputs.skip == 'false'
        run: |
          if [ -f baseline-report.json ]; then
            node scripts/ci-memory-baseline.js update baseline-report.json
            echo "baseline_updated=true" >> $GITHUB_OUTPUT
          else
            echo "baseline_updated=false" >> $GITHUB_OUTPUT
            echo "No report generated, baseline not updated"
          fi
        id: update-baseline

      - name: Generate baseline charts
        if: steps.update-baseline.outputs.baseline_updated == 'true'
        run: |
          node scripts/generate-memory-charts.js baseline-report.json memory-reports/baseline/

      - name: Commit updated baseline
        if: steps.update-baseline.outputs.baseline_updated == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add baseline-memory.json baseline-summary.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update memory baseline

            üìä Automated baseline update from scheduled workflow
            - Generated from full test suite analysis
            - Updated thresholds and reference values
            - Includes performance metrics and trends

            ü§ñ Generated with [Claude Code](https://claude.ai/code)

            Co-Authored-By: Claude <noreply@anthropic.com>"
            git push
          fi

      - name: Upload baseline artifacts
        if: steps.update-baseline.outputs.baseline_updated == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: memory-baseline-${{ github.run_id }}
          path: |
            baseline-memory.json
            baseline-summary.md
            baseline-report.json
            memory-reports/baseline/
          retention-days: 90

      - name: Create summary comment
        if: steps.update-baseline.outputs.baseline_updated == 'true'
        run: |
          echo "## üìä Memory Baseline Updated

          The memory performance baseline has been automatically updated based on the latest test suite analysis.

          ### Changes
          - **Timestamp**: $(date -u)
          - **Commit**: $(git rev-parse HEAD | cut -c1-8)
          - **Tests Analyzed**: $(jq -r '.summary.totalTests' baseline-report.json 2>/dev/null || echo 'N/A')
          - **Average Heap Usage**: $(jq -r '.memoryAnalysis.summary.averageHeapUsed' baseline-report.json 2>/dev/null | awk '{print int($1/1024/1024) "MB"}' || echo 'N/A')

          This baseline will be used for comparison in future pull request memory checks.

          ü§ñ *Automated update by [Scheduled Memory Baseline workflow](.github/workflows/memory-check-schedule.yml)*" > baseline-update-summary.md
          
          # This could be posted as an issue comment or used for notifications
          cat baseline-update-summary.md

  validate-workflow:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate memory check config
        run: |
          if [ -f .github/memory-check-config.json ]; then
            echo "‚úÖ Memory check configuration found"
            # Basic JSON validation
            if cat .github/memory-check-config.json | jq empty; then
              echo "‚úÖ Configuration is valid JSON"
            else
              echo "‚ùå Configuration is invalid JSON"
              exit 1
            fi
          else
            echo "‚ùå Memory check configuration not found"
            exit 1
          fi

      - name: Validate memory check scripts
        run: |
          REQUIRED_SCRIPTS=(
            "scripts/ci-memory-detection.js"
            "scripts/ci-memory-reporter.js" 
            "scripts/ci-memory-baseline.js"
            "scripts/generate-memory-charts.js"
            "scripts/check-memory-thresholds.js"
          )
          
          for script in "${REQUIRED_SCRIPTS[@]}"; do
            if [ -f "$script" ]; then
              echo "‚úÖ Found: $script"
              # Basic syntax check
              if node -c "$script"; then
                echo "   ‚úÖ Syntax valid"
              else
                echo "   ‚ùå Syntax error in $script"
                exit 1
              fi
            else
              echo "‚ùå Missing: $script"
              exit 1
            fi
          done
          
          echo "üéâ All memory check scripts validated successfully"