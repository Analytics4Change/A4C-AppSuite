name: Deploy A4C-FrontEnd

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: lars-tice/a4c-frontend

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get GitHub App Token
      id: app-token
      uses: tibdex/github-app-token@v1
      with:
        app_id: ${{ secrets.APP_ID }}
        private_key: ${{ secrets.APP_PRIVATE_KEY }}
        installation_id: ${{ secrets.INSTALLATION_ID }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test -- --watchAll=false --passWithNoTests

    - name: Build React application
      run: npm run build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ steps.app-token.outputs.token }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get GitHub App Token
      id: app-token
      uses: tibdex/github-app-token@v1
      with:
        app_id: ${{ secrets.APP_ID }}
        private_key: ${{ secrets.APP_PRIVATE_KEY }}
        installation_id: ${{ secrets.INSTALLATION_ID }}

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: Create image pull secret
      run: |
        kubectl create secret docker-registry ghcr-secret \
          --docker-server=ghcr.io \
          --docker-username=${{ github.actor }} \
          --docker-password=${{ steps.app-token.outputs.token }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to k3s
      run: |
        # Update the deployment with new image
        kubectl set image deployment/a4c-frontend nginx=${{ needs.build.outputs.image-tag }} || \
        kubectl apply -f k8s/

    - name: Wait for rollout
      run: |
        kubectl rollout status deployment/a4c-frontend --timeout=300s

    - name: Verify deployment
      run: |
        kubectl get pods -l app=a4c-frontend
        kubectl get service a4c-frontend-service
        kubectl get ingress a4c-frontend-ingress

    - name: Health check
      run: |
        # Wait a bit for the service to be ready
        sleep 30
        
        # Test the application
        if curl -f --retry 5 --retry-delay 10 https://a4c.firstovertheline.com/; then
          echo "✅ Deployment successful - application is responding"
        else
          echo "❌ Deployment failed - application not responding"
          exit 1
        fi

    - name: Report deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "🎉 Deployment completed successfully!"
          echo "🌐 Application URL: https://a4c.firstovertheline.com"
        else
          echo "❌ Deployment failed. Check the logs above for details."
        fi